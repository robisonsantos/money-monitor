#!/bin/bash

# Money Monitor - Configuration Script
# This script helps users configure their development environment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Helper functions
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_header() {
    echo -e "\n${PURPLE}╔════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║        Money Monitor Configuration     ║${NC}"
    echo -e "${PURPLE}╚════════════════════════════════════════╝${NC}\n"
}

# Detect operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Get default data directory based on OS
get_default_data_dir() {
    local os=$(detect_os)
    local user_home="${HOME:-$USER}"

    case "$os" in
        "macos")
            echo "$user_home/Data/postgres_dkr"
            ;;
        "linux")
            echo "$user_home/docker-data/postgres_dkr"
            ;;
        "windows")
            echo "/c/Users/$USER/docker-data/postgres_dkr"
            ;;
        *)
            echo "./postgres_data"
            ;;
    esac
}

# Show configuration options
show_options() {
    local os=$(detect_os)
    local default_dir=$(get_default_data_dir)

    echo -e "${BLUE}Available Data Directory Options:${NC}\n"

    echo -e "${YELLOW}1. Recommended for your system ($os):${NC}"
    echo -e "   $default_dir"
    echo -e "   ${BLUE}✓ OS-appropriate location${NC}"
    echo -e "   ${BLUE}✓ Persists outside project${NC}\n"

    echo -e "${YELLOW}2. Project directory (simple):${NC}"
    echo -e "   ./postgres_data"
    echo -e "   ${BLUE}✓ Easy to clean up${NC}"
    echo -e "   ${BLUE}✓ Works on all systems${NC}"
    echo -e "   ${YELLOW}⚠ Data deleted with project${NC}\n"

    echo -e "${YELLOW}3. Custom location:${NC}"
    echo -e "   /your/custom/path"
    echo -e "   ${BLUE}✓ Full control over location${NC}"
    echo -e "   ${BLUE}✓ Can share between projects${NC}\n"
}

# Configure DATA_DIR
configure_data_dir() {
    local default_dir=$(get_default_data_dir)

    show_options

    echo -e "${PURPLE}Choose your PostgreSQL data directory:${NC}"
    echo -e "1) Recommended: $default_dir"
    echo -e "2) Project directory: ./postgres_data"
    echo -e "3) Custom path"
    echo -e ""

    while true; do
        read -p "Enter choice (1-3) [1]: " choice
        choice=${choice:-1}

        case $choice in
            1)
                DATA_DIR="$default_dir"
                break
                ;;
            2)
                DATA_DIR="./postgres_data"
                break
                ;;
            3)
                read -p "Enter custom path: " custom_path
                if [ -n "$custom_path" ]; then
                    DATA_DIR="$custom_path"
                    break
                else
                    print_error "Please enter a valid path"
                fi
                ;;
            *)
                print_error "Please enter 1, 2, or 3"
                ;;
        esac
    done

    print_success "Data directory selected: $DATA_DIR"
}

# Generate encryption key
generate_encryption_key() {
    if command -v openssl >/dev/null 2>&1; then
        openssl rand -hex 32
    elif command -v node >/dev/null 2>&1; then
        node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
    elif command -v python3 >/dev/null 2>&1; then
        python3 -c "import secrets; print(secrets.token_hex(32))"
    else
        # Fallback to development key with warning
        echo "dev_key_32_bytes_for_local_development_only_never_use_in_production_123456"
        print_warning "Using development key. Install openssl, node, or python3 for secure key generation."
    fi
}

# Create .env file
create_env_file() {
    local encryption_key=$(generate_encryption_key)

    cat > .env << EOF
# Money Monitor - Local Development Environment
# Generated by configure.sh on $(date)

# ===== DATABASE CONFIGURATION =====
DATABASE_URL=postgresql://postgres:dev_password_123@localhost:5432/money_monitor
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=dev_password_123
DB_NAME=money_monitor
DB_SSL=false

# ===== SECURITY CONFIGURATION =====
ENCRYPTION_KEY=$encryption_key

# ===== APPLICATION CONFIGURATION =====
NODE_ENV=development

# ===== DOCKER CONFIGURATION =====
DATA_DIR=$DATA_DIR

# ===== DOCKER POSTGRES CONFIGURATION =====
POSTGRES_DB=money_monitor
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123

# ===== PGADMIN CONFIGURATION =====
PGADMIN_DEFAULT_EMAIL=admin@moneymonitor.local
PGADMIN_DEFAULT_PASSWORD=admin123

# ===== NOTES =====
# This file was auto-generated. You can modify any values as needed.
# Never commit this file to version control.
# To regenerate: npm run configure
EOF

    print_success ".env file created successfully"
}

# Validate configuration
validate_config() {
    print_info "Validating configuration..."

    # Check if DATA_DIR is writable
    local test_dir="$DATA_DIR"

    # Convert relative path to absolute for testing
    if [[ "$test_dir" != /* ]]; then
        test_dir="$(pwd)/$test_dir"
    fi

    # Try to create the directory
    if mkdir -p "$test_dir" 2>/dev/null; then
        print_success "Data directory is accessible: $test_dir"
        # Create a test file to verify write permissions
        if touch "$test_dir/.test" 2>/dev/null; then
            rm -f "$test_dir/.test"
            print_success "Write permissions verified"
        else
            print_warning "Directory exists but may not be writable"
        fi
    else
        print_error "Cannot create data directory: $test_dir"
        print_info "You may need to:"
        print_info "  1. Choose a different location"
        print_info "  2. Create the directory manually"
        print_info "  3. Check permissions"
        return 1
    fi
}

# Show summary
show_summary() {
    echo -e "\n${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║          Configuration Complete!       ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}\n"

    echo -e "${YELLOW}Your Configuration:${NC}"
    echo -e "  Data Directory: $DATA_DIR"
    echo -e "  Database: money_monitor"
    echo -e "  Port: 5432"
    echo -e "  Environment: .env file created"

    echo -e "\n${YELLOW}Next Steps:${NC}"
    echo -e "  1. npm run db:start     # Start PostgreSQL database"
    echo -e "  2. npm install          # Install dependencies (if not done)"
    echo -e "  3. npm run dev          # Start development server"

    echo -e "\n${YELLOW}Quick Commands:${NC}"
    echo -e "  npm run db:status       # Check database status"
    echo -e "  npm run db:logs         # View database logs"
    echo -e "  npm run db:stop         # Stop database"

    echo -e "\n${BLUE}💡 Tip: Run 'npm run setup' for complete guided setup${NC}\n"
}

# Main configuration flow
main() {
    print_header

    print_info "This script will help you configure Money Monitor for development"

    # Check if .env already exists
    if [ -f ".env" ]; then
        print_warning ".env file already exists"
        read -p "Do you want to overwrite it? (y/N): " overwrite
        case $overwrite in
            [yY][eE][sS]|[yY])
                print_info "Overwriting existing .env file..."
                ;;
            *)
                print_info "Configuration cancelled"
                exit 0
                ;;
        esac
    fi

    # Configure data directory
    configure_data_dir

    # Create .env file
    create_env_file

    # Validate configuration
    if validate_config; then
        show_summary
    else
        print_error "Configuration validation failed"
        print_info "You can still proceed, but you may encounter issues"
        print_info "Run this script again to reconfigure"
    fi
}

# Handle script arguments
case "${1:-}" in
    "--help"|"-h")
        echo "Money Monitor Configuration Script"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo "  --auto        Use defaults (no interactive prompts)"
        echo ""
        echo "This script will:"
        echo "  1. Help you choose a data directory for PostgreSQL"
        echo "  2. Generate a secure encryption key"
        echo "  3. Create a .env file with your configuration"
        echo "  4. Validate the configuration"
        echo ""
        echo "The script is interactive by default and will guide you through"
        echo "selecting the best options for your operating system."
        ;;
    "--auto")
        # Auto mode - use defaults or environment variable
        if [ -z "$DATA_DIR" ]; then
            DATA_DIR=$(get_default_data_dir)
        fi
        print_header
        print_info "Auto-configuration mode"
        print_info "Using data directory: $DATA_DIR"
        create_env_file
        validate_config && show_summary
        ;;
    *)
        main "$@"
        ;;
esac
